import { IVulnerability } from "src/interfaces/vulnerability.interface"
import { vulnerabilityModel } from "../models/vulnerability.model"
import { returnSeverity } from "../utils"

class VulnerabilityService {
  async getVulns(userId: string | null, scanId: string) {
    return await vulnerabilityModel
      .find({ userId: userId, scanId: scanId })
      .sort({ createdAt: -1, severityCode: 1 })
  }

  async getVulnById(userId: string, vulnId: string) {
    return await vulnerabilityModel.findOne({ userId: userId, _id: vulnId })
  }

  async createVuln(vulnData: IVulnerability) {
    const scan = new vulnerabilityModel(vulnData)
    return await scan.save()
  }

  async readAndSaveVulns(
    userId: string,
    scanId: string,
    outputData: any
  ): Promise<void> {
    const alerts = outputData.site.flatMap((site: any) => site.alerts || [])

    const vulnerabilities = alerts.map((vuln: any) => ({
      userId: userId,
      scanId: scanId,
      name: vuln.name,
      description: vuln.desc ? vuln.desc.replace(/<\/?p>/gi, "") : "",
      severity: returnSeverity(vuln.riskcode),
      severityCode: vuln.riskcode,
      mitigation: vuln.solution ? vuln.solution.replace(/<\/?p>/gi, "") : "",
      cwe:
        vuln.cweid && vuln.cweid !== "0" && vuln.cweid !== "-1"
          ? `CWE-${vuln.cweid}`
          : "N/A",
    }))

    await vulnerabilityModel.insertMany(vulnerabilities)

    return vulnerabilities
  }
}

export const vulnerabilityService = new VulnerabilityService()
